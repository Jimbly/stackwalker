{"version":3,"sources":["node_modules/browser-pack/_prelude.js","dist/game/build.intermediate/client/client/app.js","dist/game/build.intermediate/client/glov/client/glov/bootstrap.js","dist/game/build.intermediate/client/glov/client/glov/local_storage.js","dist/game/build.intermediate/client/glov/client/glov/polyfill.js","dist/game/build.intermediate/client/client/main.js"],"names":[],"mappings":"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","file":"app.bundle.js","sourcesContent":["(function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c=\"function\"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error(\"Cannot find module '\"+i+\"'\");throw a.code=\"MODULE_NOT_FOUND\",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u=\"function\"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()","/* eslint global-require:off */\n\n// Startup code.\n\nlet called_once = false;\nwindow.onload = function () {\n  if (called_once) {\n    return;\n  }\n  called_once = true;\n  // require('./glov/worker_comm.js').startup(); // First, so it gets loading quickly (if workers required)\n  require('./glov/bootstrap.js');\n  require('./main.js').main();\n};\n","// Portions Copyright 2019 Jimb Esser (https://github.com/Jimbly/)\n// Released under MIT License: https://opensource.org/licenses/MIT\n\n// Things that should be done before requiring or running any user-level code or other engine code\n\nrequire('./polyfill.js');\n\nlet debug = document.getElementById('debug');\nwindow.onerror = function (e, file, line, col, errorobj) {\n  let msg = `${e}\\n  at ${file}(${line}:${col})`;\n  if (errorobj && errorobj.stack) {\n    msg = `${errorobj.stack}`;\n    if (errorobj.message) {\n      if (msg.indexOf(errorobj.message) === -1) {\n        msg = `${errorobj.message}\\n${msg}`;\n      }\n    }\n    let origin = document.location.origin || '';\n    if (origin) {\n      if (origin.slice(-1) !== '/') {\n        origin += '/';\n      }\n      msg = msg.split(origin).join(''); // replace\n    }\n    // fixup weird Firefox weirdness\n    msg = msg.replace(/\\[\\d+\\]</g, '') // remove funny [123] at start of stack lines\n      .replace(/<?\\/<?/g, '/') // remove funny <s, they mess up people's copy and paste\n      .replace(/\\n([^ ])/g, '\\n  $1'); // add indentation if missing\n  }\n  let show = true;\n  if (window.glov_error_report) {\n    show = window.glov_error_report(msg, file, line, col);\n  }\n  if (show) {\n    debug.innerText = `${msg}\\n\\nPlease report this error to the developer, and then reload this page.`;\n  }\n};\nwindow.debugmsg = function (msg, clear) {\n  if (clear) {\n    debug.innerText = msg;\n  } else {\n    debug.innerText += `${msg}\\n`;\n  }\n};\n","// Portions Copyright 2019 Jimb Esser (https://github.com/Jimbly/)\n// Released under MIT License: https://opensource.org/licenses/MIT\n/* eslint-env browser */\n\nexports.storage_prefix = 'demo';\n\nlet lsd = (function () {\n  try {\n    localStorage.test = 'test';\n    return localStorage;\n  } catch (e) {\n    return {};\n  }\n}());\nexport function get(key) {\n  key = `${exports.storage_prefix}_${key}`;\n  let ret = lsd[key];\n  if (ret === 'undefined') {\n    ret = undefined;\n  }\n  return ret;\n}\n\nexport function set(key, value) {\n  key = `${exports.storage_prefix}_${key}`;\n  if (value === undefined || value === null) {\n    delete lsd[key];\n  } else {\n    lsd[key] = value;\n  }\n}\n\nexport function setJSON(key, value) {\n  set(key, JSON.stringify(value));\n}\n\nexport function getJSON(key, def) {\n  let value = get(key);\n  if (value === undefined) {\n    return def;\n  }\n  try {\n    return JSON.parse(value);\n  } catch (e) {\n    // ignore\n  }\n  return def;\n}\n\nexport function clearAll(key_prefix) {\n  let prefix = new RegExp(`^${exports.storage_prefix}_${key_prefix || ''}`, 'u');\n  for (let key in lsd) {\n    if (key.match(prefix)) {\n      delete lsd[key];\n    }\n  }\n}\n\nexport function exportAll() {\n  let obj = {};\n  let prefix = new RegExp(`^${exports.storage_prefix}_(.*)`, 'u');\n  for (let key in lsd) {\n    let m = key.match(prefix);\n    if (m) {\n      let v = lsd[key];\n      if (v && v !== 'undefined') {\n        obj[m[1]] = v;\n      }\n    }\n  }\n  return JSON.stringify(obj);\n}\n\nexport function importAll(serialized) {\n  let obj = JSON.parse(serialized);\n  clearAll();\n  for (let key in obj) {\n    set(key, obj[key]);\n  }\n}\n","/* eslint no-extend-native:off,no-invalid-this:off */\n\n// TypedArray.slice, fill, join, sort, etc - not supported on IE, some older Safari, older Android\nlet typedarrays = [Int8Array, Uint8Array, Int16Array, Uint16Array, Int32Array, Uint32Array, Float32Array];\n\nif (!Uint8Array.prototype.slice) {\n  typedarrays.forEach(function (ArrayType) {\n    Object.defineProperty(ArrayType.prototype, 'slice', {\n      value: function (begin, end) {\n        if (end === undefined) {\n          end = this.length;\n        }\n        if (end < 0) {\n          end = this.length - end;\n        }\n        begin = begin || 0;\n        if (begin >= this.length) {\n          begin = this.length - 1;\n        }\n        if (end > this.length) {\n          end = this.length;\n        }\n        if (end < begin) {\n          end = begin;\n        }\n        let len = end - begin;\n        let ret = new ArrayType(len);\n        for (let ii = begin; ii < end; ++ii) {\n          ret[ii] = this[ii];\n        }\n        return ret;\n      }\n    });\n  });\n}\n\nfunction cmpDefault(a, b) {\n  return a - b;\n}\nlet replacements = {\n  join: function (delim) {\n    return Array.prototype.join.call(this, delim);\n  },\n  fill: function (value, begin, end) {\n    if (end === undefined) {\n      end = this.length;\n    }\n    for (let ii = begin || 0; ii < end; ++ii) {\n      this[ii] = value;\n    }\n    return this;\n  },\n  sort: function (cmp) {\n    Array.prototype.sort.call(this, cmp || cmpDefault);\n  },\n};\n\nfor (let key in replacements) {\n  if (!Uint8Array.prototype[key]) {\n    typedarrays.forEach(function (ArrayType) {\n      Object.defineProperty(ArrayType.prototype, key, {\n        value: replacements[key],\n      });\n    });\n  }\n}\n\nif (!String.prototype.endsWith) {\n  Object.defineProperty(String.prototype, 'endsWith', {\n    value: function (test) {\n      return this.slice(-test.length) === test;\n    },\n  });\n  Object.defineProperty(String.prototype, 'startsWith', {\n    value: function (test) {\n      return this.slice(0, test.length) === test;\n    },\n  });\n}\n","/* eslint no-useless-catch:off */\nconst local_storage = require('./glov/local_storage.js');\nlocal_storage.storage_prefix = 'stackwalker';\n\nconst querystring = require('query-string');\nconst stack_mapper = require('stack-mapper');\n\nlet error_report_regex = /^([^ ]+) \\[([^\\]]+)] \"POST ([^\"?]+)?([^\"]+)\" START \"([^\"]+)\" \"([^\"]+)\"$/;\nlet fileline_regexs = [\n  /(.)([^(/:]+)\\((\\d+):(\\d+)\\)$/,\n  /(?:at ([^(]+) \\(.*\\/)?([^(/:]+):(\\d+)(?::(\\d+))?\\)$/,\n  /\\/*([^/@]+)\\/*@.*\\/([^(/:]+):(\\d+)(?::(\\d+))?$/,\n  /()([^(/:]+):(\\d+):(\\d+)?$/,\n];\n\nfunction prettyFileLine(a) {\n  if (a.fn) {\n    return `${a.fn} (${a.filename}:${a.line}:${a.column})`;\n  } else {\n    return `${a.filename}:${a.line}:${a.column}`;\n  }\n}\n\nfunction preparse(text) {\n  let lines = text.split('\\n');\n  let ret = [];\n  for (let ii = 0; ii < lines.length; ++ii) {\n    let line = lines[ii];\n    let m = line.match(error_report_regex);\n    if (!m) {\n      ret.push(line);\n      continue;\n    }\n    // let ip = m[1];\n    // let timestamp = m[2];\n    // let url_start = m[3];\n    let search = m[4];\n    // let referrer = m[5];\n    let useragent = m[6];\n    let query = querystring.parse(search);\n    // Source URL line\n    if (query.url) {\n      ret.push('');\n      ret.push(`User URL=${query.url}, UA=${useragent}`);\n    }\n    // Header line\n    let header = [];\n    if (query.cidx && query.cidx !== '1') {\n      header.push(`CIDX=${query.cidx}`);\n    }\n    if (query.ver) {\n      header.push(`ver=${query.ver}`);\n    }\n    if (query.user_id) {\n      header.push(`user_id=${query.user_id}`);\n    }\n    if (header.length) {\n      ret.push(header.join(', '));\n    }\n    if (query.file) {\n      ret.push(prettyFileLine({\n        filename: query.file.match(/[^/]+$/)[0],\n        line: query.line,\n        column: query.col,\n      }));\n    }\n    ret = ret.concat(query.msg.split('\\n'));\n  }\n  return ret.join('\\n');\n}\n\nfunction parseStack(text) {\n  text = preparse(text);\n  let lines = text.split('\\n');\n  lines = lines.map((line) => {\n    let m;\n    for (let ii = 0; !m && ii < fileline_regexs.length; ++ii) {\n      m = line.match(fileline_regexs[ii]);\n    }\n    if (m) {\n      return {\n        fn: m[1],\n        filename: m[2],\n        line: m[3],\n        column: m[4] ? Number(m[4]) : undefined,\n        tooltip: line,\n      };\n    }\n    return { err: line, tooltip: line };\n  });\n  return lines;\n}\n\nexport function main() {\n  let upload = document.getElementById('upload');\n  let upload_status = document.getElementById('upload_status');\n  let stack = document.getElementById('stack');\n  let frames_bundle = document.getElementById('frames_bundle');\n  let frames_source = document.getElementById('frames_source');\n  let sourcecode = document.getElementById('sourcecode');\n  let source_pre = document.getElementById('source_pre');\n  let source_line = document.getElementById('source_line');\n  let source_post = document.getElementById('source_post');\n  let fileinfo = document.getElementById('fileinfo');\n\n  let stack_data;\n  let sourcemap_data;\n  let stackmapper;\n\n  function toOptions(list) {\n    return list.map((a) => {\n      let str = a.err !== undefined ? a.err : prettyFileLine(a);\n      return `<option${a.err ? ' disabled' : ''}` +\n        `${a.tooltip?` title=\"${a.tooltip.replace(/\"/g, '&quot;')}\"`:''}` +\n        `>${str}</option>`;\n    }).join('\\n');\n  }\n\n  let mapped_stack;\n\n  function update() {\n    // window.debugmsg('', true);\n    let stack_frames = parseStack(stack_data);\n    frames_bundle.innerHTML = toOptions(stack_frames);\n\n    mapped_stack = null;\n    if (!stackmapper) {\n      frames_source.innerHTML = toOptions([{ err: 'Missing sourcemap' }]);\n      return;\n    }\n    let line_mapping = {};\n    let to_process = [];\n    for (let ii = 0; ii < stack_frames.length; ++ii) {\n      let elem = stack_frames[ii];\n      if (elem.filename) {\n        line_mapping[ii] = to_process.length;\n        to_process.push({\n          filename: elem.filename,\n          line: elem.line,\n          column: elem.column ? elem.column - 1 : undefined, // the - 1 seems to help map to the right line a lot\n        });\n      }\n    }\n    let out = stackmapper.map(to_process);\n    let out_lines = [];\n    mapped_stack = [];\n    for (let ii = 0; ii < stack_frames.length; ++ii) {\n      if (line_mapping[ii] === undefined) {\n        mapped_stack.push(null);\n        out_lines.push({ err: '' });\n      } else {\n        mapped_stack.push(out[line_mapping[ii]]);\n        out_lines.push(out[line_mapping[ii]]);\n      }\n    }\n    frames_source.innerHTML = toOptions(out_lines);\n  }\n\n  function updateFocus() {\n    let idx = frames_bundle.selectedIndex;\n    let lineinfo = mapped_stack && mapped_stack[idx];\n    if (!sourcemap_data) {\n      source_pre.textContent = 'No sourcemap loaded';\n      source_line.textContent = source_post.textContent = fileinfo.textContent = '';\n      return;\n    }\n    if (!lineinfo) {\n      source_pre.textContent = 'No source selected';\n      source_line.textContent = source_post.textContent = fileinfo.textContent = '';\n      return;\n    }\n    let { sources, sourcesContent } = sourcemap_data;\n    let { filename, line } = lineinfo;\n    fileinfo.textContent = `File: ${filename}`;\n    let found = -1;\n    for (let ii = 0; ii < sources.length; ++ii) {\n      if (sources[ii].endsWith(filename)) {\n        found = ii;\n      }\n    }\n    if (found === -1 || !sourcesContent[found]) {\n      source_pre.textContent = `Could not find ${filename} in sourcemap.sources`;\n      source_line.textContent = source_post.textContent = '';\n      return;\n    }\n    let lines = sourcesContent[found].split('\\n');\n    source_pre.textContent = lines.slice(0, line - 1).join('\\n');\n    source_line.textContent = lines[line - 1];\n    source_post.textContent = lines.slice(line, lines.length).join('\\n');\n    source_line.scrollIntoView(true);\n    let st = sourcecode.scrollTop;\n    source_line.scrollIntoView(false);\n    st += sourcecode.scrollTop;\n    sourcecode.scrollTop = Math.round(st / 2);\n  }\n\n  upload.addEventListener('change', (ev) => {\n    let file_to_load = upload.files[0];\n    let reader = new FileReader();\n    local_storage.set('sourcemap', undefined);\n    sourcemap_data = null;\n    stackmapper = null;\n    reader.onload = (loaded_event) => {\n      let text = loaded_event.target.result;\n      try {\n        sourcemap_data = JSON.parse(text);\n      } catch (e) {\n        upload_status.textContent = 'Status: Error parsing Sourcemap';\n        throw e;\n      }\n      if (sourcemap_data && sourcemap_data.version === 3) {\n        upload_status.textContent = 'Status: Sourcemap loaded';\n        stackmapper = stack_mapper(sourcemap_data);\n        //local_storage.setJSON('sourcemap', sourcemap_data);\n      } else {\n        upload_status.textContent = 'Status: Error parsing Sourcemap (expected version: 3)';\n      }\n      update();\n    };\n\n    reader.readAsText(file_to_load, 'UTF-8');\n  });\n\n  function onStackChange(ev) {\n    stack_data = ev.target.value;\n    local_storage.set('stack', stack_data);\n    update();\n  }\n  stack.addEventListener('change', onStackChange);\n  stack.addEventListener('input', onStackChange);\n  stack.value = stack_data = local_storage.get('stack') || '';\n\n  function onFramesChange(ev) {\n    let idx = ev.target.selectedIndex;\n    if (frames_bundle.selectedIndex !== idx) {\n      frames_bundle.selectedIndex = idx;\n    }\n    if (frames_source.selectedIndex !== idx) {\n      frames_source.selectedIndex = idx;\n    }\n    updateFocus();\n  }\n  frames_bundle.addEventListener('change', onFramesChange);\n  //frames_bundle.addEventListener('input', onFramesChange);\n  frames_source.addEventListener('change', onFramesChange);\n  //frames_source.addEventListener('input', onFramesChange);\n\n  //sourcemap_data = local_storage.getJSON('sourcemap');\n  if (sourcemap_data && sourcemap_data.version === 3) {\n    upload_status.textContent = 'Status: Sourcemap loaded from local storage';\n  }\n\n  // Sync scroll areas\n  let scroll_locked_source = 0;\n  let scroll_locked_bundle = 0;\n  frames_source.addEventListener('scroll', () => {\n    if (Date.now() < scroll_locked_source) {\n      return;\n    }\n    scroll_locked_bundle = Date.now() + 400;\n    frames_bundle.scrollTop = frames_source.scrollTop;\n  });\n  frames_bundle.addEventListener('scroll', () => {\n    if (Date.now() < scroll_locked_bundle) {\n      return;\n    }\n    scroll_locked_source = Date.now() + 400;\n    frames_source.scrollTop = frames_bundle.scrollTop;\n  });\n\n  update();\n}\n"],"preExistingComment":"//# sourceMappingURL=data:application/json;charset=utf-8;base64,"}